'use client';

import { z } from 'zod';
import { FunctionComponent, useState } from 'react';
import { HabitCategory, HabitPeriod, HabitType } from '@/lib/types';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from '@/components/ui/command';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { CalendarIcon, CaretSortIcon, CheckIcon } from '@radix-ui/react-icons';
import { cn } from '@/lib/utils';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Calendar } from '@/components/ui/calendar';
import { format, setDefaultOptions } from 'date-fns';
import { ru } from 'date-fns/locale';
setDefaultOptions({ locale: ru });

const baseHabitSchema = z.object({
  emoji: z.string().emoji().default('üéØ'),
  title: z
    .string()
    .min(2, { message: '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –∏–∑ 2 —Å–∏–º–≤–æ–ª–æ–≤' })
    .max(50, { message: '–ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤' })
    .default('–ë—ã—Ç—å –ª—É—á—à–µ!'),
  notificationEnabled: z.boolean().default(false),
  category: z.string().default('–î—Ä—É–≥–æ–µ'),
  period: z.nativeEnum(HabitPeriod).default(HabitPeriod.daily),
  addDate: z.coerce
    .date()
    .default(() => new Date())
    .refine((d) => d >= new Date(new Date().toDateString()), {
      message: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ',
    }),
});
const habitFormSchema = z.discriminatedUnion('type', [
  baseHabitSchema.merge(
    z.object({
      type: z.literal(HabitType.count),
      count: z.coerce.number().int().positive().default(1),
    })
  ),
  baseHabitSchema.merge(
    z.object({
      type: z.literal(HabitType.done),
      count: z.coerce.number().int().positive().default(1).optional(),
    })
  ),
]);

export const HabitForm: FunctionComponent = function () {
  const form = useForm<z.infer<typeof habitFormSchema>>({
    resolver: zodResolver(habitFormSchema),
    defaultValues: habitFormSchema.parse({ type: HabitType.done, count: 1 }),
  });
  const watchType = form.watch('type');
  function onSubmit(values: z.infer<typeof habitFormSchema>) {
    console.log(values);
  }
  const [categories, setCategories] = useState<HabitCategory[]>([
    { id: 1, name: '–î—Ä—É–≥–æ–µ' },
    { id: 2, name: '–°–ø–æ—Ä—Ç' },
    { id: 3, name: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' },
    { id: 4, name: '–ó–¥–æ—Ä–æ–≤—å–µ' },
    { id: 5, name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' },
    { id: 6, name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' },
  ]);
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="emoji"
          render={({ field }) => (
            <FormItem>
              <FormLabel>–ò–∫–æ–Ω–∫–∞</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormDescription>
                –≠—Ç–æ—Ç —ç–º–æ–¥–∑–∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–≤—ã—á–µ–∫.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>–ù–∞–∑–≤–∞–Ω–∏–µ</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormDescription>
                –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–≤—ã—á–µ–∫.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="notificationEnabled"
          render={({ field }) => (
            <FormItem>
              <FormLabel>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</FormLabel>
              <FormControl>
                <div>
                  <Switch
                    checked={field.value}
                    onCheckedChange={field.onChange}
                  />
                </div>
              </FormControl>
              <FormDescription>
                –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="category"
          render={({ field }) => (
            <FormItem>
              <FormLabel>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant="outline"
                      role="combobox"
                      className={cn(
                        'w-[200px] justify-between flex',
                        !field.value && 'text-muted-foreground'
                      )}
                    >
                      {field.value
                        ? categories.find((c) => c.name === field.value)?.name
                        : '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é'}
                      <CaretSortIcon className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-[200px] p-0">
                  <Command>
                    <CommandInput
                      placeholder="–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
                      className="h-9"
                    />
                    <CommandList>
                      <CommandEmpty>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</CommandEmpty>
                      <CommandGroup>
                        {categories.map((category) => (
                          <CommandItem
                            value={category.name}
                            key={category.id}
                            onSelect={() => {
                              form.setValue('category', category.name);
                            }}
                          >
                            <CheckIcon
                              className={cn(
                                'ml-auto h-4 w-4',
                                category.name === field.value
                                  ? 'opacity-100'
                                  : 'opacity-0'
                              )}
                            />
                            {category.name}
                          </CommandItem>
                        ))}
                      </CommandGroup>
                    </CommandList>
                  </Command>
                </PopoverContent>
              </Popover>

              <FormDescription>
                –ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø—Ä–∏–≤—ã—á–∫–∞.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="period"
          render={({ field }) => (
            <FormItem>
              <FormLabel>–ü–µ—Ä–∏–æ–¥</FormLabel>
              <Select onValueChange={field.onChange} value={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–∏–≤—ã—á–∫–∏" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</SelectItem>
                  <SelectItem value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</SelectItem>
                  <SelectItem value="monthly">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</SelectItem>
                </SelectContent>
              </Select>
              <FormDescription>
                –ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="type"
          shouldUnregister={true}
          render={({ field }) => (
            <FormItem>
              <FormLabel>–¢–∏–ø</FormLabel>
              <Select
                onValueChange={field.onChange}
                defaultValue={field.value}
              >
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–≤—ã—á–∫–∏" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="done">–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è</SelectItem>
                  <SelectItem value="count">–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è</SelectItem>
                </SelectContent>
              </Select>
              <FormDescription>
                –ö–∞–∫–æ–π —Ç–∏–ø –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        {watchType === 'count' ? (
          <FormField
            control={form.control}
            name="count"
            shouldUnregister={true}
            render={({ field }) => (
              <FormItem>
                <FormLabel>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</FormLabel>
                <FormControl>
                  <Input {...field} type="number" min={1} />
                </FormControl>
                <FormDescription>
                  –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∏–≤—ã—á–∫—É.
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          ></FormField>
        ) : null}
        <FormField
          control={form.control}
          name="addDate"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant={'outline'}
                      className={cn(
                        'w-[240px] pl-3 text-left font-normal',
                        !field.value && 'text-muted-foreground'
                      )}
                    >
                      {field.value ? (
                        format(field.value, 'PPP')
                      ) : (
                        <span>Pick a date</span>
                      )}
                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={field.value}
                    onSelect={field.onChange}
                    locale={ru}
                    ISOWeek
                    disabled={(date) => {
                      return (
                        date < new Date(new Date().toDateString()) ||
                        date > new Date('2100-01-01')
                      );
                    }}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
              <FormDescription>
                –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω–µ—Ç—Å—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <Button type="submit">–ì–æ—Ç–æ–≤–æ</Button>
      </form>
    </Form>
  );
};
