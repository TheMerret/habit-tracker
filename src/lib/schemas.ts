import { z } from 'zod';
import { HabitPeriod, HabitType } from '@/lib/types';

const baseHabitSchema = z.object({
  emoji: z
    .string()
    .emoji()
    .default('üéØ')
    .refine((s) => [...new Intl.Segmenter().segment(s)].length == 1, {
      message: '–≠–º–æ–¥–∑–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º',
    }),
  title: z
    .string()
    .min(2, { message: '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –∏–∑ 2 —Å–∏–º–≤–æ–ª–æ–≤' })
    .max(50, { message: '–ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤' })
    .default('–ë—ã—Ç—å –ª—É—á—à–µ!'),
  notificationEnabled: z.boolean().default(false),
  category: z.string().default('–î—Ä—É–≥–æ–µ'),
  period: z.nativeEnum(HabitPeriod).default(HabitPeriod.daily),
  addDate: z.coerce.date().default(() => new Date(new Date().toDateString())),
});

export const habitFormSchema = z.discriminatedUnion('type', [
  baseHabitSchema.merge(
    z.object({
      type: z.literal(HabitType.number),
      targetValue: z.coerce.number().int().positive().default(1),
    })
  ),
  baseHabitSchema.merge(
    z.object({
      type: z.literal(HabitType.state),
      targetValue: z.coerce.number().int().positive().default(1).optional(),
    })
  ),
]);

export interface Habit {
  // —É –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
  id: number;

  title: string;

  category: string;

  // –¥–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–π –í–∞—Å—è —Ç—Ä–µ–∫–∞–µ—Ç —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É
  addDate: Date;

  period: 'daily' | 'weekly' | 'monthly';

  // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ ‚Äì —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫,
  // –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–π—Ç–∏ 10000 —à–∞–≥–æ–≤
  targetValue?: number;
}

export interface HabitMods {
  emoji: string;
  addDate: string;
  active: boolean;
  notificationEnabled: boolean;
}

export interface AppHabit extends Omit<Habit, 'addDate'>, HabitMods {}

export interface HabitAction {
  // id –ø—Ä–∏–≤—ã—á–∫–∏, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ Habit
  id: number;

  // –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
  date: Date;

  // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ ‚Äì –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫,
  // –Ω–∞–ø—Ä–∏–º–µ—Ä, 12000 –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ "–ø—Ä–æ–π—Ç–∏ 10000 —à–∞–≥–æ–≤"
  value?: number;
}

export interface AppHabitAction extends Omit<HabitAction, 'date'> {
  date: string;
}

export interface DataToUpload {
  // –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–º–∏—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö
  habits: Habit[];

  // –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
  actions: HabitAction[];
}

export interface HabitTemplate {
  title: string;
  emoji: string;
  period: 'daily' | 'weekly' | 'monthly';
  category: string;
  target?: number;
}

export interface HabitState {
  habitId: number;
  date: string;
  value: number;
}
